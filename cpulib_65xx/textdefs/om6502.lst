//TODO: fixup all uses of _tmp2 where actually only 8 bits are needed (look for _tmp=read?)


# license:BSD-3-Clause
# copyright-holders:Olivier Galibert
# NMOS 6502 opcodes
# Verified with visual6502
#   documented opcodes

adc_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp = read(_tmp);
	do_adc((byte)_tmp);
	fetch();

adc_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _x)) {
		read(set_l(_tmp,(byte)(_tmp+_x)));
	}
	_tmp += _x;
	_tmp = read(_tmp);
	do_adc((byte)_tmp);
	fetch();

adc_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_tmp += _y;
	_tmp = read(_tmp);
	do_adc((byte)_tmp);
	fetch();

adc_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	do_adc(read(_tmp));
	fetch();

adc_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	do_adc(read(_tmp+_y));
	fetch();

adc_imm
	_tmp = read(_pc++);
	do_adc((byte)_tmp);
	fetch();

adc_zpg
	_tmp = read(_pc++);
	_tmp = read(_tmp);
	do_adc((byte)_tmp);
	fetch();

adc_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = read((byte)(_tmp+_x));
	do_adc((byte)_tmp);
	fetch();

and_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_a &= read(_tmp);
	set_nz(_a);
	fetch();

and_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _x)) {
		read(set_l(_tmp,(byte)(_tmp+_x)));
	}
	_tmp += _x;
	_a &= read(_tmp);
	set_nz(_a);
	fetch();

and_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_tmp += _y;
	_a &= read(_tmp);
	set_nz(_a);
	fetch();

and_imm
	_a &= read(_pc++);
	set_nz(_a);
	fetch();

and_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_a &= read(_tmp);
	set_nz(_a);
	fetch();

and_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_a &= read(_tmp+_y);
	set_nz(_a);
	fetch();

and_zpg
	_tmp = read(_pc++);
	_a &= read(_tmp);
	set_nz(_a);
	fetch();

and_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_a &= read((byte)(_tmp+_x));
	set_nz(_a);
	fetch();

asl_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_asl(_tmp2);
	write(_tmp, _tmp2);
	fetch();

asl_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_asl(_tmp2);
	write(_tmp, _tmp2);
	fetch();

asl_acc
	read(_pc);
	_a = do_asl(_a);
	fetch();

asl_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_asl(_tmp2);
	write(_tmp, _tmp2);
	fetch();

asl_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_asl(_tmp2);
	write(_tmp, _tmp2);
	fetch();

bcc_rel
	_tmp = read(_pc++);
	if((_p & F_C) == 0) {
		read(_pc);
		if(page_changing(_pc, (sbyte)(_tmp))) {
			read(set_l(_pc,(byte)(_pc+(sbyte)(_tmp))));
		}
		_pc = (ushort)(_pc + (sbyte)(_tmp));
	}
	fetch();

bcs_rel
	_tmp = read(_pc++);
	if((_p & F_C) != 0) {
		read(_pc);
		if(page_changing(_pc, (sbyte)(_tmp))) {
			read(set_l(_pc,(byte)(_pc+(sbyte)(_tmp))));
		}
		_pc = (ushort)(_pc + (sbyte)(_tmp));
	}
	fetch();

beq_rel
	_tmp = read(_pc++);
	if((_p & F_Z) != 0) {
		read(_pc);
		if(page_changing(_pc, (sbyte)(_tmp))) {
			read(set_l(_pc,(byte)(_pc+(sbyte)(_tmp))));
		}
		_pc = (ushort)(_pc + (sbyte)(_tmp));
	}
	fetch();

bit_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	do_bit(read(_tmp));
	fetch();

bit_zpg
	_tmp = read(_pc++);
	do_bit(read(_tmp));
	fetch();

bmi_rel
	_tmp = read(_pc++);
	if((_p & F_N) != 0) {
		read(_pc);
		if(page_changing(_pc, (sbyte)(_tmp))) {
			read(set_l(_pc,(byte)(_pc+(sbyte)(_tmp))));
		}
		_pc = (ushort)(_pc + (sbyte)(_tmp));
	}
	fetch();

bne_rel
	_tmp = read(_pc++);
	if((_p & F_Z) == 0) {
		read(_pc);
		if(page_changing(_pc, (sbyte)(_tmp))) {
			read(set_l(_pc,(byte)(_pc+(sbyte)(_tmp))));
		}
		_pc = (ushort)(_pc + (sbyte)(_tmp));
	}
	fetch();

bpl_rel
	_tmp = read(_pc++);
	if((_p & F_N) == 0) {
		read(_pc);
		if(page_changing(_pc, (sbyte)(_tmp))) {
			read(set_l(_pc,(byte)(_pc+(sbyte)(_tmp))));
		}
		_pc = (ushort)(_pc + (sbyte)(_tmp));
	}
	fetch();

brk_imp
	// The 6502 bug when a nmi occurs in a brk is reproduced (case !irq_taken && nmi_state)
	read(_pc);
	if(!irq_taken) {
		_pc++;
	}
	write(_sp, (byte)(_pc >> 8));
	dec_SP();
	write(_sp, (byte)_pc);
	dec_SP();
	write(_sp, (byte)(irq_taken ? _p & (F_B ^ 0xFF) : _p));
	dec_SP();
	if(nmi_state) {
		_pc = read(0xfffa);
		_pc = set_h(_pc, read(0xfffb));
		nmi_state = false;
	} else {
		_pc = read(0xfffe);
		_pc = set_h(_pc, read(0xffff));
	}
	irq_taken = false;
	_p |= F_I; // Do *not* move after the fetch
	fetch();

bvc_rel
	_tmp = read(_pc++);
	if((_p & F_V) == 0) {
		read(_pc);
		if(page_changing(_pc, (sbyte)(_tmp))) {
			read(set_l(_pc,(byte)(_pc+(sbyte)(_tmp))));
		}
		_pc = (ushort)(_pc + (sbyte)(_tmp));
	}
	fetch();

bvs_rel
	_tmp = read(_pc++);
	if((_p & F_V) != 0) {
		read(_pc);
		if(page_changing(_pc, (sbyte)(_tmp))) {
			read(set_l(_pc,(byte)(_pc+(sbyte)(_tmp))));
		}
		_pc = (ushort)(_pc + (sbyte)(_tmp));
	}
	fetch();

clc_imp
	read(_pc);
	_p &= F_C ^ 0xFF;
	fetch();

cld_imp
	read(_pc);
	_p &= F_D ^ 0xFF;
	fetch();

cli_imp
	read(_pc);
	prefetch();
	_p &= F_I ^ 0xFF; // Do *not* move it before the fetch
	postfetch();

clv_imp
	read(_pc);
	_p &= F_V ^ 0xFF;
	fetch();

cmp_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp = read(_tmp);
	do_cmp(_a, (byte)_tmp);
	fetch();

cmp_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _x)) {
		read(set_l(_tmp,(byte)(_tmp+_x)));
	}
	_tmp += _x;
	_tmp = read(_tmp);
	do_cmp(_a, (byte)_tmp);
	fetch();

cmp_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_tmp += _y;
	_tmp = read(_tmp);
	do_cmp(_a, (byte)_tmp);
	fetch();

cmp_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	do_cmp(_a, read(_tmp));
	fetch();

cmp_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	do_cmp(_a, read(_tmp+_y));
	fetch();

cmp_imm
	_tmp = read(_pc++);
	do_cmp(_a, (byte)_tmp);
	fetch();

cmp_zpg
	_tmp = read(_pc++);
	_tmp = read(_tmp);
	do_cmp(_a, (byte)_tmp);
	fetch();

cmp_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = read((byte)(_tmp+_x));
	do_cmp(_a, (byte)_tmp);
	fetch();

cpx_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp = read(_tmp);
	do_cmp(_x, (byte)_tmp);
	fetch();

cpx_imm
	_tmp = read(_pc++);
	do_cmp(_x, (byte)_tmp);
	fetch();

cpx_zpg
	_tmp = read(_pc++);
	_tmp = read(_tmp);
	do_cmp(_x, (byte)_tmp);
	fetch();

cpy_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp = read(_tmp);
	do_cmp(_y, (byte)_tmp);
	fetch();

cpy_imm
	_tmp = read(_pc++);
	do_cmp(_y, (byte)_tmp);
	fetch();

cpy_zpg
	_tmp = read(_pc++);
	_tmp = read(_tmp);
	do_cmp(_y, (byte)_tmp);
	fetch();

dec_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2--;
	set_nz(_tmp2);
	write(_tmp, _tmp2);
	fetch();

dec_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2--;
	set_nz(_tmp2);
	write(_tmp, _tmp2);
	fetch();

dec_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2--;
	set_nz(_tmp2);
	write(_tmp, _tmp2);
	fetch();

dec_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2--;
	set_nz(_tmp2);
	write(_tmp, _tmp2);
	fetch();

dex_imp
	read(_pc);
	_x--;
	set_nz(_x);
	fetch();

dey_imp
	read(_pc);
	_y--;
	set_nz(_y);
	fetch();

eor_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_a ^= read(_tmp);
	set_nz(_a);
	fetch();

eor_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _x)) {
		read(set_l(_tmp,(byte)(_tmp+_x)));
	}
	_tmp += _x;
	_a ^= read(_tmp);
	set_nz(_a);
	fetch();

eor_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_tmp += _y;
	_a ^= read(_tmp);
	set_nz(_a);
	fetch();

eor_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_a ^= read(_tmp);
	set_nz(_a);
	fetch();

eor_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_a ^= read(_tmp+_y);
	set_nz(_a);
	fetch();

eor_imm
	_a ^= read(_pc++);
	set_nz(_a);
	fetch();

eor_zpg
	_tmp = read(_pc++);
	_a ^= read(_tmp);
	set_nz(_a);
	fetch();

eor_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_a ^= read((byte)(_tmp+_x));
	set_nz(_a);
	fetch();

inc_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2++;
	set_nz(_tmp2);
	write(_tmp, _tmp2);
	fetch();

inc_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2++;
	set_nz(_tmp2);
	write(_tmp, _tmp2);
	fetch();

inc_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2++;
	set_nz(_tmp2);
	write(_tmp, _tmp2);
	fetch();

inc_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2++;
	set_nz(_tmp2);
	write(_tmp, _tmp2);
	fetch();

inx_imp
	read(_pc);
	_x++;
	set_nz(_x);
	fetch();

iny_imp
	read(_pc);
	_y++;
	set_nz(_y);
	fetch();

jmp_adr
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_pc = _tmp;
	fetch();

jmp_ind
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_pc = read(_tmp);
	_pc = set_h(_pc, read(set_l(_tmp,(byte)(_tmp+1))));
	fetch();

jsr_adr
	_tmp = read(_pc++);
	read(_sp);
	write(_sp, (byte)(_pc>>8));
	dec_SP();
	write(_sp, (byte)_pc);
	dec_SP();
	_tmp = set_h(_tmp, read(_pc++));
	_pc = _tmp;
	fetch();

lda_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_a = read(_tmp);
	set_nz(_a);
	fetch();

lda_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _x)) {
		read(set_l(_tmp,(byte)(_tmp+_x)));
	}
	_a = read(_tmp + _x);
	set_nz(_a);
	fetch();

lda_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_a = read(_tmp + _y);
	set_nz(_a);
	fetch();

lda_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_a = read(_tmp);
	set_nz(_a);
	fetch();

lda_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_a = read(_tmp+_y);
	set_nz(_a);
	fetch();

lda_imm
	_a = read(_pc++);
	set_nz(_a);
	fetch();

lda_zpg
	_tmp = read(_pc++);
	_a = read(_tmp);
	set_nz(_a);
	fetch();

lda_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_a = read((byte)(_tmp+_x));
	set_nz(_a);
	fetch();

ldx_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_x = read(_tmp);
	set_nz(_x);
	fetch();

ldx_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_x = read(_tmp + _y);
	set_nz(_x);
	fetch();

ldx_imm
	_x = read(_pc++);
	set_nz(_x);
	fetch();

ldx_zpg
	_tmp = read(_pc++);
	_x = read(_tmp);
	set_nz(_x);
	fetch();

ldx_zpy
	_tmp = read(_pc++);
	read(_tmp);
	_x = read((byte)(_tmp+_y));
	set_nz(_x);
	fetch();

ldy_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_y = read(_tmp);
	set_nz(_y);
	fetch();

ldy_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _x)) {
		read(set_l(_tmp,(byte)(_tmp+_x)));
	}
	_tmp += _x;
	_y = read(_tmp);
	set_nz(_y);
	fetch();

ldy_imm
	_y = read(_pc++);
	set_nz(_y);
	fetch();

ldy_zpg
	_tmp = read(_pc++);
	_y = read(_tmp);
	set_nz(_y);
	fetch();

ldy_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_y = read((byte)(_tmp+_x));
	set_nz(_y);
	fetch();

lsr_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_lsr(_tmp2);
	write(_tmp, _tmp2);
	fetch();

lsr_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_lsr(_tmp2);
	write(_tmp, _tmp2);
	fetch();

lsr_acc
	read(_pc);
	_a = do_lsr(_a);
	fetch();

lsr_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_lsr(_tmp2);
	write(_tmp, _tmp2);
	fetch();

lsr_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_lsr(_tmp2);
	write(_tmp, _tmp2);
	fetch();

nop_imp
	read(_pc);
	fetch();

ora_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_a |= read(_tmp);
	set_nz(_a);
	fetch();

ora_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _x)) {
		read(set_l(_tmp,(byte)(_tmp+_x)));
	}
	_tmp += _x;
	_a |= read(_tmp);
	set_nz(_a);
	fetch();

ora_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_tmp += _y;
	_a |= read(_tmp);
	set_nz(_a);
	fetch();

ora_imm
	_a |= read(_pc++);
	set_nz(_a);
	fetch();

ora_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_a |= read(_tmp);
	set_nz(_a);
	fetch();

ora_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_a |= read(_tmp+_y);
	set_nz(_a);
	fetch();

ora_zpg
	_tmp = read(_pc++);
	_a |= read(_tmp);
	set_nz(_a);
	fetch();

ora_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_a |= read((byte)(_tmp+_x));
	set_nz(_a);
	fetch();

pha_imp
	read(_pc);
	write(_sp, _a);
	dec_SP();
	fetch();

php_imp
	read(_pc);
	write(_sp, _p);
	dec_SP();
	fetch();

pla_imp
	read(_pc);
	read(_sp);
	inc_SP();
	_a = read(_sp);
	set_nz(_a);
	fetch();

plp_imp
	read(_pc);
	read(_sp);
	inc_SP();
	_tmp = (byte)(read(_sp) | (F_B|F_E));
	prefetch();
	_p = (byte)_tmp; // Do *not* move it before the fetch
	postfetch();

rol_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_rol(_tmp2);
	write(_tmp, _tmp2);
	fetch();

rol_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_rol(_tmp2);
	write(_tmp, _tmp2);
	fetch();

rol_acc
	read(_pc);
	_a = do_rol(_a);
	fetch();

rol_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_rol(_tmp2);
	write(_tmp, _tmp2);
	fetch();

rol_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_rol(_tmp2);
	write(_tmp, _tmp2);
	fetch();

ror_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_ror(_tmp2);
	write(_tmp, _tmp2);
	fetch();

ror_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_ror(_tmp2);
	write(_tmp, _tmp2);
	fetch();

ror_acc
	read(_pc);
	_a = do_ror(_a);
	fetch();

ror_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_ror(_tmp2);
	write(_tmp, _tmp2);
	fetch();

ror_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_ror(_tmp2);
	write(_tmp, _tmp2);
	fetch();

rti_imp
	read(_pc);
	read(_sp);
	inc_SP();
	_p = (byte)(read(_sp) | (F_B|F_E));
	inc_SP();
	_pc = read(_sp);
	inc_SP();
	_pc = set_h(_pc, read(_sp));
	fetch();

rts_imp
	read(_pc);
	read(_sp);
	inc_SP();
	_pc = read(_sp);
	inc_SP();
	_pc = set_h(_pc, read(_sp));
	read(_pc++);
	fetch();

sbc_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	do_sbc(_tmp2);
	fetch();

sbc_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _x)) {
		read(set_l(_tmp,(byte)(_tmp+_x)));
	}
	_tmp += _x;
	_tmp2 = read(_tmp);
	do_sbc(_tmp2);
	fetch();

sbc_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_tmp += _y;
	_tmp2 = read(_tmp);
	do_sbc(_tmp2);
	fetch();

sbc_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	do_sbc(read(_tmp));
	fetch();

sbc_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	do_sbc(read(_tmp+_y));
	fetch();

sbc_imm
	_tmp2 = read(_pc++);
	do_sbc(_tmp2);
	fetch();

sbc_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	do_sbc(_tmp2);
	fetch();

sbc_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp2 = read((byte)(_tmp+_x));
	do_sbc(_tmp2);
	fetch();

sec_imp
	read(_pc);
	_p |= F_C;
	fetch();

sed_imp
	read(_pc);
	_p |= F_D;
	fetch();

sei_imp
	read(_pc);
	prefetch();
	_p |= F_I; // Do *not* move it before the fetch
	postfetch();

sta_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	write(_tmp, _a);
	fetch();

sta_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	write(_tmp+_x, _a);
	fetch();

sta_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	write(_tmp+_y, _a);
	fetch();

sta_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	write(_tmp, _a);
	fetch();

sta_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	write(_tmp+_y, _a);
	fetch();

sta_zpg
	_tmp = read(_pc++);
	write(_tmp, _a);
	fetch();

sta_zpx
	_tmp = read(_pc++);
	read(_tmp);
	write((byte)(_tmp+_x), _a);
	fetch();

stx_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	write(_tmp, _x);
	fetch();

stx_zpg
	_tmp = read(_pc++);
	write(_tmp, _x);
	fetch();

stx_zpy
	_tmp = read(_pc++);
	read(_tmp);
	write((byte)(_tmp+_y), _x);
	fetch();

sty_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	write(_tmp, _y);
	fetch();

sty_zpg
	_tmp = read(_pc++);
	write(_tmp, _y);
	fetch();

sty_zpx
	_tmp = read(_pc++);
	read(_tmp);
	write((byte)(_tmp+_x), _y);
	fetch();

tax_imp
	read(_pc);
	_x = _a;
	set_nz(_x);
	fetch();

tay_imp
	read(_pc);
	_y = _a;
	set_nz(_y);
	fetch();

tsx_imp
	read(_pc);
	_x = (byte)_sp;
	set_nz(_x);
	fetch();

txa_imp
	read(_pc);
	_a = _x;
	set_nz(_a);
	fetch();

txs_imp
	read(_pc);
	_sp = set_l(_sp,(byte)(_x));
	fetch();

tya_imp
	read(_pc);
	_a = _y;
	set_nz(_a);
	fetch();

#   exceptions
reset
	_tmp=read(_pc);
	_tmp=read(_pc);
	_tmp=read(_sp); dec_SP();
	_tmp=read(_sp); dec_SP();
	_tmp=read(_sp); dec_SP();
	_p |= F_I; _pc = read(0xfffc);
	_pc = set_h(_pc, read(0xfffd));
	fetch();


#   undocumented reliable instructions
dcp_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2--;
	write(_tmp, _tmp2);
	do_cmp(_a, _tmp2);
	fetch();

dcp_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2--;
	write(_tmp, _tmp2);
	do_cmp(_a, _tmp2);
	fetch();

dcp_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2--;
	write(_tmp, _tmp2);
	do_cmp(_a, _tmp2);
	fetch();

dcp_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2--;
	write(_tmp, _tmp2);
	do_cmp(_a, _tmp2);
	fetch();

dcp_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2--;
	write(_tmp, _tmp2);
	do_cmp(_a, _tmp2);
	fetch();

dcp_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2--;
	write(_tmp, _tmp2);
	do_cmp(_a, _tmp2);
	fetch();

dcp_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2--;
	write(_tmp, _tmp2);
	do_cmp(_a, _tmp2);
	fetch();

isb_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2++;
	write(_tmp, _tmp2);
	do_sbc(_tmp2);
	fetch();

isb_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2++;
	write(_tmp, _tmp2);
	do_sbc(_tmp2);
	fetch();

isb_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2++;
	write(_tmp, _tmp2);
	do_sbc(_tmp2);
	fetch();

isb_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2++;
	write(_tmp, _tmp2);
	do_sbc(_tmp2);
	fetch();

isb_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2++;
	write(_tmp, _tmp2);
	do_sbc(_tmp2);
	fetch();

isb_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2++;
	write(_tmp, _tmp2);
	do_sbc(_tmp2);
	fetch();

isb_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2++;
	write(_tmp, _tmp2);
	do_sbc(_tmp2);
	fetch();

lax_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_a = _x = read(_tmp);
	set_nz(_a);
	fetch();

lax_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_a = _x = read(_tmp+_y);
	set_nz(_a);
	fetch();

lax_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_a = _x = read(_tmp);
	set_nz(_a);
	fetch();

lax_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_a = _x = read(_tmp+_y);
	set_nz(_a);
	fetch();

lax_zpg
	_tmp = read(_pc++);
	_a = _x = read(_tmp);
	set_nz(_a);
	fetch();

lax_zpy
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_y);
	_a = _x = read(_tmp);
	set_nz(_a);
	fetch();

rla_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_rol(_tmp2);
	write(_tmp, _tmp2);
	_a &= _tmp2;
	set_nz(_a);
	fetch();

rla_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_rol(_tmp2);
	write(_tmp, _tmp2);
	_a &= _tmp2;
	set_nz(_a);
	fetch();

rla_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_rol(_tmp2);
	write(_tmp, _tmp2);
	_a &= _tmp2;
	set_nz(_a);
	fetch();

rla_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_rol(_tmp2);
	write(_tmp, _tmp2);
	_a &= _tmp2;
	set_nz(_a);
	fetch();

rla_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_rol(_tmp2);
	write(_tmp, _tmp2);
	_a &= _tmp2;
	set_nz(_a);
	fetch();

rla_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_rol(_tmp2);
	write(_tmp, _tmp2);
	_a &= _tmp2;
	set_nz(_a);
	fetch();

rla_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_rol(_tmp2);
	write(_tmp, _tmp2);
	_a &= _tmp2;
	set_nz(_a);
	fetch();

rra_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_ror(_tmp2);
	write(_tmp, _tmp2);
	do_adc(_tmp2);
	fetch();

rra_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_ror(_tmp2);
	write(_tmp, _tmp2);
	do_adc(_tmp2);
	fetch();

rra_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_ror(_tmp2);
	write(_tmp, _tmp2);
	do_adc(_tmp2);
	fetch();

rra_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_ror(_tmp2);
	write(_tmp, _tmp2);
	do_adc(_tmp2);
	fetch();

rra_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_ror(_tmp2);
	write(_tmp, _tmp2);
	do_adc(_tmp2);
	fetch();

rra_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_ror(_tmp2);
	write(_tmp, _tmp2);
	do_adc(_tmp2);
	fetch();

rra_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_ror(_tmp2);
	write(_tmp, _tmp2);
	do_adc(_tmp2);
	fetch();

sax_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = (byte)(_a & _x);
	write(_tmp, _tmp2);
	fetch();

sax_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_tmp2 = (byte)(_a & _x);
	write(_tmp, _tmp2);
	fetch();

sax_zpg
	_tmp = read(_pc++);
	_tmp2 = (byte)(_a & _x);
	write(_tmp, _tmp2);
	fetch();

sax_zpy
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_y);
	_tmp2 = (byte)(_a & _x);
	write(_tmp, _tmp2);
	fetch();

sbx_imm
	_tmp2 = read(_pc++);
	_x &= _a;
	if(_x < _tmp2) {
		_p &= F_C ^ 0xFF;
	} else {
		_p |= F_C;
	}
	_x -= _tmp2;
	set_nz(_x);
	fetch();

sha_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp2 = (byte)(_a & _x & ((_tmp >> 8)+1));
	if(page_changing(_tmp, _y)) {
		_tmp = set_h((ushort)(_tmp+_y), _tmp2);
	} else {
		_tmp += _y;
	}
	write(_tmp, _tmp2);
	fetch();

sha_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp2 =(byte)(_a & _x & ((_tmp >> 8)+1));
	if(page_changing(_tmp, _y)) {
		_tmp = set_h((ushort)(_tmp+_y), _tmp2);
	} else {
		_tmp += _y;
	}
	write(_tmp, _tmp2);
	fetch();

shs_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_sp = set_l(_sp,(byte)(_a & _x));
	_tmp2 =(byte)(_a & _x & ((_tmp >> 8)+1));
	if(page_changing(_tmp, _y)) {
		_tmp = set_h((ushort)(_tmp+_y), _tmp2);
	} else {
		_tmp += _y;
	}
	write(_tmp, _tmp2);
	fetch();

shx_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp2 =(byte)(_x & ((_tmp >> 8)+1));
	if(page_changing(_tmp, _y)) {
		_tmp = set_h((ushort)(_tmp+_y), _tmp2);
	} else {
		_tmp += _y;
	}
	write(_tmp, _tmp2);
	fetch();

shy_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp2 =(byte)(_y & ((_tmp >> 8)+1));
	if(page_changing(_tmp, _x)) {
		_tmp = set_h((ushort)(_tmp+_x), _tmp2);
	} else {
		_tmp += _x;
	}
	write(_tmp, _tmp2);
	fetch();

slo_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_asl(_tmp2);
	write(_tmp, _tmp2);
	_a |= _tmp2;
	set_nz(_a);
	fetch();

slo_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_asl(_tmp2);
	write(_tmp, _tmp2);
	_a |= _tmp2;
	set_nz(_a);
	fetch();

slo_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_asl(_tmp2);
	write(_tmp, _tmp2);
	_a |= _tmp2;
	set_nz(_a);
	fetch();

slo_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_asl(_tmp2);
	write(_tmp, _tmp2);
	_a |= _tmp2;
	set_nz(_a);
	fetch();

slo_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_asl(_tmp2);
	write(_tmp, _tmp2);
	_a |= _tmp2;
	set_nz(_a);
	fetch();

slo_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_asl(_tmp2);
	write(_tmp, _tmp2);
	_a |= _tmp2;
	set_nz(_a);
	fetch();

slo_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_asl(_tmp2);
	write(_tmp, _tmp2);
	_a |= _tmp2;
	set_nz(_a);
	fetch();

sre_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_lsr(_tmp2);
	write(_tmp, _tmp2);
	_a ^= _tmp2;
	set_nz(_a);
	fetch();

sre_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_x)));
	_tmp += _x;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_lsr(_tmp2);
	write(_tmp, _tmp2);
	_a ^= _tmp2;
	set_nz(_a);
	fetch();

sre_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_lsr(_tmp2);
	write(_tmp, _tmp2);
	_a ^= _tmp2;
	set_nz(_a);
	fetch();

sre_idx
	_tmp2 = read(_pc++);
	read(_tmp2);
	_tmp2 += _x;
	_tmp = read(_tmp2 & 0xff);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_lsr(_tmp2);
	write(_tmp, _tmp2);
	_a ^= _tmp2;
	set_nz(_a);
	fetch();

sre_idy
	_tmp2 = read(_pc++);
	_tmp = read(_tmp2);
	_tmp = set_h(_tmp, read((_tmp2+1) & 0xff));
	read(set_l(_tmp,(byte)(_tmp+_y)));
	_tmp += _y;
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_lsr(_tmp2);
	write(_tmp, _tmp2);
	_a ^= _tmp2;
	set_nz(_a);
	fetch();

sre_zpg
	_tmp = read(_pc++);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_lsr(_tmp2);
	write(_tmp, _tmp2);
	_a ^= _tmp2;
	set_nz(_a);
	fetch();

sre_zpx
	_tmp = read(_pc++);
	read(_tmp);
	_tmp = (byte)(_tmp+_x);
	_tmp2 = read(_tmp);
	write(_tmp, _tmp2);
	_tmp2 = do_lsr(_tmp2);
	write(_tmp, _tmp2);
	_a ^= _tmp2;
	set_nz(_a);
	fetch();

# undocumented unreliable instructions
anc_imm
	_a &= read(_pc++);
	set_nz(_a);
	if((_a & 0x80) != 0) {
		_p |= F_C;
	} else {
		_p &= F_C ^ 0xFF;
	}
	fetch();

ane_imm
	_tmp2 = read(_pc++);
	_a &= (byte)(_tmp2 & _x);
	set_nz(_a);
	fetch();

asr_imm
	_a &= read(_pc++);
	_a = do_lsr(_a);
	fetch();

arr_imm
	_a &= read(_pc++);
	do_arr();
	fetch();

las_aby
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _y)) {
		read(set_l(_tmp,(byte)(_tmp+_y)));
	}
	_tmp2 = read(_tmp+_y);
	_a = (byte)(_tmp2 | 0x51);
	_x = 0xff;
	set_nz(_tmp2);
	fetch();

lxa_imm
	_a = _x = read(_pc++);
	set_nz(_a);
	fetch();

# nop variants
nop_aba
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	read(_tmp);
	fetch();

nop_abx
	_tmp = read(_pc++);
	_tmp = set_h(_tmp, read(_pc++));
	if(page_changing(_tmp, _x)) {
		read(set_l(_tmp,(byte)(_tmp+_x)));
	}
	read(_tmp + _x);
	fetch();

nop_imm
	read(_pc++);
	fetch();

nop_zpg
	_tmp = read(_pc++);
	read(_tmp);
	fetch();

nop_zpx
	_tmp = read(_pc++);
	read(_tmp);
	read((byte)(_tmp+_x));
	fetch();

# system killers
kil_non
	read(_pc++);
	read(0xffff);
	read(0xfffe);
	read(0xfffe);
	
	while(true) {
		read(0xffff);
	}

	fetch();

	
