# license:BSD-3-Clause
# copyright-holders:Olivier Galibert
# m65c02 opcodes

adc_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP = read(TMP);
	do_adc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

adc_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	TMP += X;
	TMP = read(TMP);
	do_adc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

adc_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP += Y;
	TMP = read(TMP);
	do_adc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

adc_idx
	TMP2 = read(PC++);
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	do_adc(read(TMP));
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

adc_idy
	TMP2 = read(PC++);
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	do_adc(read(TMP+Y));
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

adc_imm
	TMP = read(PC++);
	do_adc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

adc_zpg
	TMP = read(PC++);
	TMP = read(TMP);
	do_adc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

adc_zpi
	TMP2 = read(PC++);
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	do_adc(read(TMP));
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

adc_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = read(uint8_t(TMP+X));
	do_adc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

and_zpi
	TMP2 = read(PC++);
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	A &= read(TMP);
	set_nz(A);
	fetch();

asl_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

asl_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

asl_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

asl_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

bbr_zpb
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	TMP = read(PC++);
	if(!(TMP2 & (1 << ((IR >> 4) & 7)))) {
		read(PC);
		if(page_changing(PC, int8_t(TMP))) {
			read(set_l(PC, PC+int8_t(TMP)));
		}
		PC += int8_t(TMP);
	}
	fetch();

bbs_zpb
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	TMP = read(PC++);
	if(TMP2 & (1 << ((IR >> 4) & 7))) {
		read(PC);
		if(page_changing(PC, int8_t(TMP))) {
			read(set_l(PC, PC+int8_t(TMP)));
		}
		PC += int8_t(TMP);
	}
	fetch();

bit_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	TMP += X;
	do_bit(read(TMP));
	fetch();

bit_imm
	TMP = read(PC++);
	if(A & TMP) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	fetch();

bit_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = read(uint8_t(TMP+X));
	do_bit(TMP);
	fetch();

bra_rel
	TMP = read(PC++);
	read(PC);
	if(page_changing(PC, int8_t(TMP))) {
		read(set_l(PC, PC+int8_t(TMP)));
	}
	PC += int8_t(TMP);
	fetch();

brk_imp
	if(irq_taken || nmi_state) {
		read(PC);
	} else {
		read(PC++);
	}
	write(SP, PC >> 8);
	dec_SP();
	write(SP, PC);
	dec_SP();
	write(SP, irq_taken || nmi_state ? P & ~F_B : P);
	dec_SP();
	if(irq_taken && nmi_state) {
		PC = read(0xfffa);
		PC = set_h(PC, read(0xfffb));
		nmi_state = false;
	} else {
		PC = read(0xfffe);
		PC = set_h(PC, read(0xffff));
	}
	irq_taken = false;
	P = (P | F_I) & ~F_D; // Do *not* move after the fetch
	fetch();

cmp_zpi
	TMP2 = read(PC++);
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	do_cmp(A, read(TMP));
	fetch();

dec_acc
	read(PC);
	A--;
	set_nz(A);
	fetch();

dec_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

dec_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

dec_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

dec_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

eor_zpi
	TMP2 = read(PC++);
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	A ^= read(TMP);
	set_nz(A);
	fetch();

inc_acc
	read(PC);
	A++;
	set_nz(A);
	fetch();

inc_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

inc_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

inc_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

inc_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

jmp_iax
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	read(set_l(TMP, TMP+X));
	TMP += X;
	PC = read(TMP);
	PC = set_h(PC, read(TMP+1));
	fetch();

jmp_ind
#TODO: DB: check this against Master, it has been bodged to match timings as per WDC datasheet
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(PC);
	PC = read(TMP);
	PC = set_h(PC, read(TMP+1));
	fetch();

lda_zpi
	TMP2 = read(PC++);
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	A = read(TMP);
	set_nz(A);
	fetch();

lsr_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

lsr_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

lsr_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

lsr_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

nop_imp
	fetch();

nop_aba
	read(PC++);
	read(PC++);
	read(PC);
	read(PC);
	read(PC);
	read(PC);
	read(PC);
	fetch();

nop_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	read(set_l(TMP, TMP+X));
	fetch();

ora_zpi
	TMP2 = read(PC++);
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	A |= read(TMP);
	set_nz(A);
	fetch();

phx_imp
	read(PC);
	write(SP, X);
	dec_SP();
	fetch();

phy_imp
	read(PC);
	write(SP, Y);
	dec_SP();
	fetch();

plx_imp
	read(PC);
	read(SP);
	inc_SP();
	X = read(SP);
	set_nz(X);
	fetch();

ply_imp
	read(PC);
	read(SP);
	inc_SP();
	Y = read(SP);
	set_nz(Y);
	fetch();

rmb_bzp
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	TMP2 &= ~(1 << ((IR >> 4) & 7));
	write(TMP, TMP2);
	fetch();

rol_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

rol_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

rol_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

rol_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

ror_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

ror_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

ror_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

ror_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = uint8_t(TMP+X);
	TMP2 = read(TMP);
	read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

sbc_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP = read(TMP);
	do_sbc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

sbc_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(page_changing(TMP, X)) {
		read(set_l(TMP, TMP+X));
	}
	TMP += X;
	TMP = read(TMP);
	do_sbc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

sbc_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	TMP += Y;
	TMP = read(TMP);
	do_sbc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

sbc_idx
	TMP2 = read(PC++);
	read(TMP2);
	TMP2 += X;
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	do_sbc(read(TMP));
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

sbc_idy
	TMP2 = read(PC++);
	TMP = read(TMP2);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	if(page_changing(TMP, Y)) {
		read(set_l(TMP, TMP+Y));
	}
	do_sbc(read(TMP+Y));
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

sbc_imm
	TMP = read(PC++);
	do_sbc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

sbc_zpg
	TMP = read(PC++);
	TMP = read(TMP);
	do_sbc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

sbc_zpi
	TMP2 = read(PC++);
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	do_sbc(read(TMP));
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

sbc_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = read(uint8_t(TMP+X));
	do_sbc(TMP);
	if(P & F_D) {
		read(PC);
		set_nz(A);
	}
	fetch();

smb_bzp
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	TMP2 |= 1 << ((IR >> 4) & 7);
	write(TMP, TMP2);
	fetch();

sta_zpi
	TMP2 = read(PC++);
	TMP = read(TMP2 & 0xff);
	TMP = set_h(TMP, read((TMP2+1) & 0xff));
	write(TMP, A);
	fetch();

stp_imp
	while(true) {
		read(PC);			// TODO:this is bogus - the real chip stops phi2
	}
	fetch();

stz_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP, 0x00);
	fetch();

stz_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	read(set_l(TMP, TMP+X));
	write(TMP+X, 0x00);
	fetch();

stz_zpg
	TMP = read(PC++);
	write(TMP, 0x00);
	fetch();

stz_zpx
	TMP = read(PC++);
	read(TMP);
	write(uint8_t(TMP+X), 0x00);
	fetch();

trb_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 &= ~A;
	write(TMP, TMP2);
	fetch();

trb_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 &= ~A;
	write(TMP, TMP2);
	fetch();

tsb_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 |= A;
	write(TMP, TMP2);
	fetch();

tsb_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 |= A;
	write(TMP, TMP2);
	fetch();

wai_imp
	read(PC);
	read(PC);
	while (!nmi_state && !irq_state) {
		read(PC);						//TODO:test this
	}
	fetch();

#   exceptions
reset
	read(0xffff);
	read(PC);
	read(SP); dec_SP();
	read(SP); dec_SP();
	read(SP); dec_SP();
	P = (P | F_I) & ~F_D;
	PC = read(0xfffc);
	PC = set_h(PC, read(0xfffd));
	fetch();
