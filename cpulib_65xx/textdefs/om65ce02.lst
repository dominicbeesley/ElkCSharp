# license:BSD-3-Clause
# copyright-holders:Olivier Galibert
# 65ce02 opcodes, a lot only remove dummy read/write cycles, some are new, some use the B register

adc_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP = read(TMP);
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP = read(TMP);
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	TMP = read(TMP);
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_adc(read(TMP));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_adc(read(TMP+Y));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_adc(read(TMP+Z));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_imm
	TMP = read(PC++);
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

adc_zpx
	TMP = read(PC++);
	TMP = read(B|uint8_t(TMP+X));
	do_adc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

and_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	A &= read(TMP);
	set_nz(A);
	fetch();

and_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	A &= read(TMP);
	set_nz(A);
	fetch();

and_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A &= read(TMP);
	set_nz(A);
	fetch();

and_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A &= read(TMP+Y);
	set_nz(A);
	fetch();

and_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A &= read(TMP+Z);
	set_nz(A);
	fetch();

and_zpg
	TMP = read(PC++);
	A &= read(B|TMP);
	set_nz(A);
	fetch();

and_zpx
	TMP = read(PC++);
	A &= read(B|uint8_t(TMP+X));
	set_nz(A);
	fetch();

asl_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

asl_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP2 = read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

asl_acc
	A = do_asl(A);
	fetch();

asl_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

asl_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2 = do_asl(TMP2);
	write(TMP, TMP2);
	fetch();

asr_acc
	A = do_asr(A);
	fetch();

asr_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2 = do_asr(TMP2);
	write(TMP, TMP2);
	fetch();

asr_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2 = do_asr(TMP2);
	write(TMP, TMP2);
	fetch();

asw_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP3 = read(TMP);
	TMP3 = set_h(TMP3, read(TMP+1));
	P &= ~(F_C|F_N|F_Z);
	if(TMP3 & 0x8000) {
		P |= F_C;
	}
	TMP3 <<= 1;
	if(!TMP3) {
		P |= F_Z;
	} else {
		if(TMP3 & 0x8000) {
			P |= F_N;
		}
	}
	write(TMP, TMP3);
	write(TMP, TMP3 >> 8);
	fetch();

aug_iw3
	read(PC++);
	read(PC++);
	read(PC++);
	fetch();

bbr_zpb
	// Access pattern uncertain
	TMP = read(PC++);
	TMP2 = read(TMP);
	TMP = read(PC++);
	if(!(TMP2 & (1 << ((IR >> 4) & 7)))) {
		PC += int8_t(TMP);
	}
	fetch();

bbs_zpb
	// Access pattern uncertain
	TMP = read(PC++);
	TMP2 = read(TMP);
	TMP = read(PC++);
	if(TMP2 & (1 << ((IR >> 4) & 7))) {
		PC += int8_t(TMP);
	}
	fetch();

bcc_rel
	TMP = read(PC++);
	if(!(P & F_C)) {
		PC += int8_t(TMP);
	}
	fetch();

bcc_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(!(P & F_C)) {
		PC += TMP-1;
	}
	fetch();

bcs_rel
	TMP = read(PC++);
	if(P & F_C) {
		PC += int8_t(TMP);
	}
	fetch();

bcs_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(P & F_C) {
		PC += TMP-1;
	}
	fetch();

beq_rel
	TMP = read(PC++);
	if(P & F_Z) {
		PC += int8_t(TMP);
	}
	fetch();

beq_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(P & F_Z) {
		PC += TMP-1;
	}
	fetch();

bit_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	do_bit(read(TMP));
	fetch();

bit_imm
	TMP = read(PC++);
	do_bit(TMP);
	fetch();

bit_zpg
	TMP = B|read(PC++);
	do_bit(read(TMP));
	fetch();

bit_zpx
	TMP = read(PC++);
	TMP = read(B|uint8_t(TMP+X));
	do_bit(TMP);
	fetch();

bmi_rel
	TMP = read(PC++);
	if(P & F_N) {
		PC += int8_t(TMP);
	}
	fetch();

bmi_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(P & F_N) {
		PC += TMP-1;
	}
	fetch();

bne_rel
	TMP = read(PC++);
	if(!(P & F_Z)) {
		PC += int8_t(TMP);
	}
	fetch();

bne_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(!(P & F_Z)) {
		PC += TMP-1;
	}
	fetch();

bpl_rel
	TMP = read(PC++);
	if(!(P & F_N)) {
		PC += int8_t(TMP);
	}
	fetch();

bpl_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(!(P & F_N)) {
		PC += TMP-1;
	}
	fetch();

bra_rel
	TMP = read(PC++);
	PC += int8_t(TMP);
	fetch();

bra_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	PC += TMP - 1;
	fetch();

brk_imp
	if(irq_taken) {
		read(PC);
	} else {
		read(PC++);
	}
	write(SP, PC >> 8);
	dec_SP_ce();
	write(SP, PC);
	dec_SP_ce();
	write(SP, irq_taken || nmi_state ? P & ~F_B : P);
	dec_SP_ce();
	if(nmi_state) {
		PC = read(0xfffa);
		PC = set_h(PC, read(0xfffb));
		nmi_state = false;
	} else {
		PC = read(0xfffe);
		PC = set_h(PC, read(0xffff));
	}
	irq_taken = false;
	P = (P | F_I) & ~F_D; // Do *not* move after the fetch
	fetch();

bsr_rw2
	TMP = read(PC++);
	write(SP, PC>>8);
	dec_SP_ce();
	write(SP, PC);
	dec_SP_ce();
	TMP = set_h(TMP, read(PC++));
	PC += TMP-1;
	fetch();

bvc_rel
	TMP = read(PC++);
	if(!(P & F_V)) {
		PC += int8_t(TMP);
	}
	fetch();

bvc_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(!(P & F_V)) {
		PC += TMP-1;
	}
	fetch();

bvs_rel
	TMP = read(PC++);
	if(P & F_V) {
		PC += int8_t(TMP);
	}
	fetch();

bvs_rw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	if(P & F_V) {
		PC += TMP-1;
	}
	fetch();

clc_imp
	P &= ~F_C;
	fetch();

cld_imp
	P &= ~F_D;
	fetch();

cle_imp
	read(PC);
	P &= ~F_E;
	fetch();

cli_imp
	prefetch();
	P &= ~F_I; // Do *not* move it before the fetch
	postfetch();

clv_imp
	P &= ~F_V;
	fetch();

cmp_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP = read(TMP);
	do_cmp(A, TMP);
	fetch();

cmp_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	TMP = read(TMP);
	do_cmp(A, TMP);
	fetch();

cmp_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_cmp(A, read(TMP));
	fetch();

cmp_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_cmp(A, read(TMP+Y));
	fetch();

cmp_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_cmp(A, read(TMP+Z));
	fetch();

cmp_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_cmp(A, TMP);
	fetch();

cmp_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = read(B|uint8_t(TMP+X));
	do_cmp(A, TMP);
	fetch();

cpx_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_cmp(X, TMP);
	fetch();

cpy_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_cmp(Y, TMP);
	fetch();

cpz_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP = read(TMP);
	do_cmp(Z, TMP);
	fetch();

cpz_imm
	TMP = read(PC++);
	do_cmp(Z, TMP);
	fetch();

cpz_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_cmp(Z, TMP);
	fetch();

dec_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

dec_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP2 = read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

dec_acc
	A--;
	set_nz(A);
	fetch();

dec_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

dec_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2--;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

dew_zpg
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	P &= ~(F_N|F_Z);
	TMP++;
	if(!TMP) {
		P |= F_Z;
	} else {
		if(TMP & 0x8000) {
			P |= F_N;
		}
	}
	TMP2++;
	write(B|TMP2, TMP);
	TMP2++;
	write(B|TMP2, TMP >> 8);
	fetch();

dex_imp
	X--;
	set_nz(X);
	fetch();

dey_imp
	Y--;
	set_nz(Y);
	fetch();

dez_imp
	Z--;
	set_nz(Z);
	fetch();

eor_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	A ^= read(TMP);
	set_nz(A);
	fetch();

eor_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	A ^= read(TMP);
	set_nz(A);
	fetch();

eor_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A ^= read(TMP);
	set_nz(A);
	fetch();

eor_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A ^= read(TMP+Y);
	set_nz(A);
	fetch();

eor_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A ^= read(TMP+Z);
	set_nz(A);
	fetch();

eor_zpg
	TMP = read(PC++);
	A ^= read(B|TMP);
	set_nz(A);
	fetch();

eor_zpx
	TMP = read(PC++);
	A ^= read(B|uint8_t(TMP+X));
	set_nz(A);
	fetch();

inc_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

inc_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP2 = read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

inc_acc
	A++;
	set_nz(A);
	fetch();

inc_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

inc_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2++;
	set_nz(TMP2);
	write(TMP, TMP2);
	fetch();

inw_zpg
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	P &= ~(F_N|F_Z);
	TMP++;
	if(!TMP) {
		P |= F_Z;
	} else {
		if(TMP & 0x8000) {
			P |= F_N;
		}
	}
	TMP2--;
	write(B|TMP2, TMP);
	TMP2++;
	write(B|TMP2, TMP >> 8);
	fetch();

inx_imp
	X++;
	set_nz(X);
	fetch();

iny_imp
	Y++;
	set_nz(Y);
	fetch();

inz_imp
	Z++;
	set_nz(Z);
	fetch();

jmp_iax
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	PC = read(TMP);
	PC = set_h(PC, read(TMP+1));
	fetch();

jmp_ind
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	PC = read(TMP);
	PC = set_h(PC, read(TMP+1));
	fetch();

jsr_adr
	TMP = read(PC++);
	write(SP, PC>>8);
	dec_SP_ce();
	write(SP, PC);
	dec_SP_ce();
	TMP = set_h(TMP, read(PC++));
	PC = TMP;
	fetch();

jsr_iax
	TMP = read(PC++);
	write(SP, PC>>8);
	dec_SP_ce();
	write(SP, PC);
	dec_SP_ce();
	TMP = set_h(TMP, read(PC++));
	PC = read(TMP);
	PC = set_h(PC, read(TMP+1));
	PC += X;
	fetch();

jsr_ind
	TMP = read(PC++);
	write(SP, PC>>8);
	dec_SP_ce();
	write(SP, PC);
	dec_SP_ce();
	TMP = set_h(TMP, read(PC++));
	PC = read(TMP);
	PC = set_h(PC, read(TMP+1));
	fetch();

lda_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	A = read(TMP + X);
	set_nz(A);
	fetch();

lda_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	A = read(TMP + Y);
	set_nz(A);
	fetch();

lda_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A = read(TMP);
	set_nz(A);
	fetch();

lda_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A = read(TMP+Y);
	set_nz(A);
	fetch();

lda_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A = read(TMP+Z);
	set_nz(A);
	fetch();

lda_isy
	read(PC);
	TMP = read(PC++);
	if(P & F_E) {
		TMP = set_l(SP, SP+TMP);
	} else {
		TMP = SP + TMP;
	}
	TMP2 = read(TMP);
	TMP++;
	TMP = TMP2 | (read(TMP) << 8);
	A = read(TMP+Y);
	set_nz(A);
	fetch();

lda_zpg
	TMP = read(PC++);
	A = read(B|TMP);
	set_nz(A);
	fetch();

lda_zpx
	TMP = read(PC++);
	A = read(B|uint8_t(TMP+X));
	set_nz(A);
	fetch();

ldx_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	X = read(TMP + Y);
	set_nz(X);
	fetch();

ldx_zpg
	TMP = read(PC++);
	X = read(B|TMP);
	set_nz(X);
	fetch();

ldx_zpy
	TMP = read(PC++);
	X = read(B|uint8_t(TMP+Y));
	set_nz(X);
	fetch();

ldy_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	Y = read(TMP);
	set_nz(Y);
	fetch();

ldy_zpg
	TMP = read(PC++);
	Y = read(B|TMP);
	set_nz(Y);
	fetch();

ldy_zpx
	TMP = read(PC++);
	Y = read(B|uint8_t(TMP+X));
	set_nz(Y);
	fetch();

ldz_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	Z = read(TMP);
	set_nz(Z);
	fetch();

ldz_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	Z = read(TMP + X);
	set_nz(Z);
	fetch();

ldz_imm
	Z = read(PC++);
	set_nz(Z);
	fetch();

lsr_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

lsr_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	read(set_l(TMP, TMP+X));
	TMP += X;
	TMP2 = read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

lsr_acc
	A = do_lsr(A);
	fetch();

lsr_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

lsr_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2 = do_lsr(TMP2);
	write(TMP, TMP2);
	fetch();

neg_acc
	read(PC);
	A = -A;
	set_nz(A);
	fetch();

ora_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	A |= read(TMP);
	set_nz(A);
	fetch();

ora_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	A |= read(TMP);
	set_nz(A);
	fetch();

ora_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A |= read(TMP);
	set_nz(A);
	fetch();

ora_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A |= read(TMP+Y);
	set_nz(A);
	fetch();

ora_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	A |= read(TMP+Z);
	set_nz(A);
	fetch();

ora_zpg
	TMP = read(PC++);
	A |= read(B|TMP);
	set_nz(A);
	fetch();

ora_zpx
	TMP = read(PC++);
	A |= read(B|uint8_t(TMP+X));
	set_nz(A);
	fetch();

#  push/pop instructions and rti/rtn/rts are not fully streamlined
pha_imp
	read(PC);
	write(SP, A);
	dec_SP_ce();
	fetch();

php_imp
	read(PC);
	write(SP, P);
	dec_SP_ce();
	fetch();

phw_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP3 = read(TMP);
	TMP3 = set_h(TMP3, read(TMP+1));
	dec_SP_ce();
	write(SP, TMP3);
	dec_SP_ce();
	write(SP, TMP3 >> 8);
	fetch();

phw_iw2
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	dec_SP_ce();
	write(SP, TMP);
	dec_SP_ce();
	write(SP, TMP >> 8);
	fetch();

phx_imp
	read(PC);
	write(SP, X);
	dec_SP_ce();
	fetch();

phy_imp
	read(PC);
	write(SP, Y);
	dec_SP_ce();
	fetch();

phz_imp
	read(PC);
	write(SP, Z);
	dec_SP_ce();
	fetch();

pla_imp
	read(PC);
	inc_SP_ce();
	A = read(SP);
	set_nz(A);
	fetch();

plp_imp
	read(PC);
	inc_SP_ce();
	TMP = read(SP) | F_B;
	prefetch();
	P = TMP; // Do *not* move it before the fetch
	postfetch();

plx_imp
	read(PC);
	inc_SP_ce();
	X = read(SP);
	set_nz(X);
	fetch();

ply_imp
	read(PC);
	inc_SP_ce();
	Y = read(SP);
	set_nz(Y);
	fetch();

plz_imp
	read(PC);
	inc_SP_ce();
	Z = read(SP);
	set_nz(Z);
	fetch();

rmb_bzp
	TMP = read(PC++);
	TMP2 = read(TMP);
	TMP2 &= ~(1 << ((IR >> 4) & 7));
	write(TMP, TMP2);
	fetch();

rol_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

rol_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP2 = read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

rol_acc
	A = do_rol(A);
	fetch();

rol_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

rol_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2 = do_rol(TMP2);
	write(TMP, TMP2);
	fetch();

ror_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

ror_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP2 = read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

ror_acc
	A = do_ror(A);
	fetch();

ror_zpg
	TMP = B|read(PC++);
	TMP2 = read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

ror_zpx
	TMP = read(PC++);
	TMP = B|uint8_t(TMP+X);
	TMP2 = read(TMP);
	TMP2 = do_ror(TMP2);
	write(TMP, TMP2);
	fetch();

row_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP3 = read(TMP);
	TMP3 = set_h(TMP3, read(TMP+1));
	TMP2 = P;
	P &= ~(F_C|F_N|F_Z);
	if(TMP3 & 0x8000) {
		P |= F_C;
	}
	TMP3 <<= 1;
	if(TMP2 & F_C) {
		TMP3 |= 0x0001;
	}
	if(!TMP3) {
		P |= F_Z;
	} else {
		if(TMP3 & 0x8000) {
			P |= F_N;
		}
	}
	write(TMP, TMP3);
	write(TMP, TMP3 >> 8);
	fetch();

rti_imp
	read(PC);
	inc_SP_ce();
	P = read(SP) | F_B;
	inc_SP_ce();
	PC = read(SP);
	inc_SP_ce();
	PC = set_h(PC, read(SP));
	fetch();

rtn_imm
	TMP = read(PC++);
	if(P & F_E) {
		SP = set_l(SP, SP+TMP);
	} else {
		SP += TMP;
	}
	read(PC);
	read(SP);
	inc_SP();
	PC = read(SP);
	inc_SP();
	PC = set_h(PC, read(SP));
	read(PC++);
	fetch();

rts_imp
	inc_SP_ce();
	PC = read(SP);
	inc_SP_ce();
	PC = set_h(PC, read(SP));
	read(PC++);
	fetch();

sbc_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP = read(TMP);
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += X;
	TMP = read(TMP);
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP += Y;
	TMP = read(TMP);
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_sbc(read(TMP));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_sbc(read(TMP+Y));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	do_sbc(read(TMP+Z));
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_imm
	TMP = read(PC++);
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_zpg
	TMP = read(PC++);
	TMP = read(B|TMP);
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sbc_zpx
	TMP = read(PC++);
	read(TMP);
	TMP = read(B|uint8_t(TMP+X));
	do_sbc(TMP);
	if(P & F_D) {
		set_nz(A);
	}
	fetch();

sec_imp
	P |= F_C;
	fetch();

sed_imp
	P |= F_D;
	fetch();

see_imp
	read(PC);
	P |= F_E;
	fetch();

sei_imp
	prefetch();
	P |= F_I; // Do *not* move it before the fetch
	postfetch();

smb_bzp
	TMP = read(PC++);
	TMP2 = read(TMP);
	TMP2 |= 1 << ((IR >> 4) & 7);
	write(TMP, TMP2);
	fetch();

sta_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP+X, A);
	fetch();

sta_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP+Y, A);
	fetch();

sta_idx
	TMP2 = read(PC++);
	TMP2 += X;
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	write(TMP, A);
	fetch();

sta_idy
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	write(TMP+Y, A);
	fetch();

sta_idz
	TMP2 = read(PC++);
	TMP = read(B|TMP2);
	TMP2++;
	TMP = set_h(TMP, read(B|TMP2));
	write(TMP+Z, A);
	fetch();

sta_isy
	read(PC);
	TMP = read(PC++);
	if(P & F_E) {
		TMP = set_l(SP, SP+TMP);
	} else {
		TMP = SP + TMP;
	}
	TMP2 = read(TMP);
	TMP++;
	TMP = TMP2 | (read(TMP) << 8);
	write(TMP+Y, A);
	fetch();

sta_zpg
	TMP = read(PC++);
	write(B|TMP, A);
	fetch();

sta_zpx
	TMP = read(PC++);
	write(B|uint8_t(TMP+X), A);
	fetch();

stx_aby
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP+Y, X);
	fetch();

stx_zpg
	TMP = read(PC++);
	write(B|TMP, X);
	fetch();

stx_zpy
	TMP = read(PC++);
	write(B|uint8_t(TMP+Y), X);
	fetch();

sty_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP+X, Y);
	fetch();

sty_zpg
	TMP = read(PC++);
	write(B|TMP, Y);
	fetch();

sty_zpx
	TMP = read(PC++);
	write(B|uint8_t(TMP+X), Y);
	fetch();

stz_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP, A);
	fetch();

stz_abx
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	write(TMP+X, A);
	fetch();

stz_zpg
	TMP = read(PC++);
	write(B|TMP, Z);
	fetch();

stz_zpx
	TMP = read(PC++);
	write(B|uint8_t(TMP+X), Z);
	fetch();

tab_imp
	B = A << 8;
	fetch();

tax_imp
	X = A;
	set_nz(X);
	fetch();

tay_imp
	Y = A;
	set_nz(Y);
	fetch();

taz_imp
	Z = A;
	set_nz(Z);
	fetch();

tba_imp
	A = B >> 8;
	set_nz(A);
	fetch();

trb_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 &= ~A;
	write(TMP, TMP2);
	fetch();

trb_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 &= ~A;
	write(TMP, TMP2);
	fetch();

tsb_aba
	TMP = read(PC++);
	TMP = set_h(TMP, read(PC++));
	TMP2 = read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 |= A;
	write(TMP, TMP2);
	fetch();

tsb_zpg
	TMP = read(PC++);
	TMP2 = read(TMP);
	if(A & TMP2) {
		P &= ~F_Z;
	} else {
		P |= F_Z;
	}
	TMP2 |= A;
	write(TMP, TMP2);
	fetch();

tsx_imp
	X = SP;
	set_nz(X);
	fetch();

tsy_imp
	Y = SP >> 8;
	set_nz(Y);
	fetch();

txa_imp
	A = X;
	set_nz(A);
	fetch();

txs_imp
	SP = set_l(SP, X);
	fetch_noirq();

tys_imp
	SP = set_h(SP, Y);
	fetch();

tya_imp
	A = Y;
	set_nz(A);
	fetch();

tza_imp
	A = Z;
	set_nz(A);
	fetch();
